// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Attribute {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar(255)
  attributeValues AttributeValue[]
}

model AttributeValue {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  value       String?
  attributeId Int
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  variants    Variant[]
}

model Variant {
  id              Int              @id @default(autoincrement())
  productId       Int
  product         Product          @relation(fields: [productId], references: [id])
  attributeValues AttributeValue[]
  priceDiff       Float
  imageUrls       String[]
  stocks          Stock[]
  orderItems      OrderItem[]
  promotionId     Int?
  promotion       Promotion?       @relation(fields: [promotionId], references: [id])
}

model Product {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String    @db.VarChar(255)
  description String?
  published   Boolean   @default(false)
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  variants    Variant[]
  price       Float
  orderCount  Int       @default(0)
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(255)
  products Product[]
  parentId Int?       @db.Integer
  parent   Category?  @relation("ParentChildren", fields: [parentId], references: [id])
  children Category[] @relation("ParentChildren")
}

model Store {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  lat      Float
  long     Float
  address  String
  phone    String
  products Stock[]
}

model Stock {
  id        Int      @id @default(autoincrement())
  variantId Int
  variant   Variant  @relation(fields: [variantId], references: [id])
  storeId   Int
  store     Store    @relation(fields: [storeId], references: [id])
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([variantId, storeId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  email           String            @unique
  emailVerified   DateTime?
  name            String?
  password        String?
  role            Role              @default(USER)
  accounts        Account[]
  sessions        Session[]
  image           String?
  orders          Order[]
  addresses       Address[]
  groups          Group[]           @relation("GroupMembers")
  permissions     Permission[]      @relation("UserPermissions")
  UserPermissions UserPermissions[]
}

model Address {
  id          Int         @id @default(autoincrement())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  type        AddressType
  name        String
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  phoneNumber String
  default     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  orders      Order[]
}

enum AddressType {
  HOUSE
  CONDO
  APARTMENT
}

model Order {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  customerId     String
  customer       User           @relation(fields: [customerId], references: [id])
  orderItems     OrderItem[]
  totalAmount    Float
  status         OrderStatus    @default(PENDING)
  shippingType   ShippingType   @default(DELIVERY)
  shippingMethod ShippingMethod @default(STANDARD)
  paymentStatus  PaymentStatus  @default(PENDING)
  addressID      Int
  address        Address        @relation(fields: [addressID], references: [id])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id])
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

model Promotion {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  discount     Float
  discountType DiscountType
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean      @default(true)
  variants     Variant[]
}

enum DiscountType {
  FLAT_PRICE
  PERCENTAGE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum Role {
  SUPERADMIN
  ADMIN
  STOREMANAGER
  STAFF
  USER
}

enum ShippingType {
  DELIVERY
  PICKUP
}

enum ShippingMethod {
  STANDARD
  NEXTDAY
  ONEDAY
}

model Permission {
  id               String             @id @default(cuid())
  name             String             @unique
  description      String?
  groups           Group[]            @relation("GroupPermissions")
  users            User[]             @relation("UserPermissions")
  GroupPermissions GroupPermissions[]
  UserPermissions  UserPermissions[]
}

model Group {
  id               String             @id @default(cuid())
  name             String             @unique
  description      String?
  users            User[]             @relation("GroupMembers")
  permissions      Permission[]       @relation("GroupPermissions")
  GroupPermissions GroupPermissions[]
}

model GroupPermissions {
  groupId      String
  permissionId String
  group        Group      @relation(fields: [groupId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([groupId, permissionId])
}

model UserPermissions {
  userId       String
  permissionId String
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}
